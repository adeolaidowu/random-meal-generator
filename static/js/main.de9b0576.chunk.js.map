{"version":3,"sources":["components/Header.js","components/MealVideo.js","components/Meal.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","getRandomMeal","MealVideo","videoLink","title","src","slice","frameBorder","allow","allowFullScreen","Meal","meal","ingredients","i","push","animateIn","animateOut","strMeal","strInstructions","strMealThumb","alt","strCategory","strArea","strTags","split","join","map","ingredient","index","key","strYoutube","Footer","App","state","e","preventDefault","fetch","then","res","json","setState","meals","catch","error","console","log","setTimeout","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yOAWeA,EATA,SAACC,GAChB,OACE,yBAAKC,UAAU,UACb,+CACA,4BAAQA,UAAU,SAASC,QAASF,EAAMG,eAA1C,qBCSWC,EAbG,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MAC7B,OACE,6BACA,mDACA,4BAAQL,UAAU,aAAaK,MAAOA,EACtCC,IAAG,wCAAmCF,EAAUG,OAAO,KACvDC,YAAY,IAAIC,MAAM,4EACoCC,iBAAe,M,gBCiC9DC,EAtCF,SAAC,GAEZ,IAF0B,IAAZC,EAAW,EAAXA,KACVC,EAAc,GACVC,EAAI,EAAGA,GAAK,IACfF,EAAK,gBAAD,OAAiBE,IADFA,IAEpBD,EAAYE,KAAKH,EAAK,gBAAD,OAAiBE,IAAO,MAAQF,EAAK,aAAD,OAAcE,KAK7E,OACE,kBAAC,IAAD,CAAiBE,UAAU,SAASC,WAAW,WAC7C,yBAAKjB,UAAU,WACf,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,4BAAKY,EAAKM,QAAV,KACA,2BAAIN,EAAKO,kBAEX,6BACE,yBAAKb,IAAG,UAAKM,EAAKQ,cAAgBC,IAAG,UAAKT,EAAKM,QAAV,UAA2BlB,UAAU,cACzEY,EAAKU,aAAe,2BAAG,2CAAH,IAA2BV,EAAKU,aACpDV,EAAKW,SAAW,2BAAG,uCAAH,IAAuBX,EAAKW,SAC5CX,EAAKY,SAAW,2BAAG,uCAAH,IAAuBZ,EAAKY,QAAQC,MAAM,KAAKC,KAAK,OACrE,4CACA,4BACGb,EAAYc,KAAI,SAACC,EAAWC,GAAZ,OAAsB,wBAAIC,IAAKD,EAAM,GAAID,SAIhE,yBAAK5B,UAAU,yBACb,6BACGY,EAAKmB,YAAc,kBAAC,EAAD,CAAW3B,UAAaQ,EAAKmB,WAAY1B,MAAOO,EAAKM,eCxBlEc,EARA,WACb,OACE,yBAAKhC,UAAU,UAAf,gDC4BWiC,G,kNAzBbC,MAAQ,CACNtB,KAAM,I,EAGVV,cAAgB,SAACiC,GACfA,EAAEC,iBACFC,MAAM,sDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA1B,GAAI,OAAI,EAAK6B,UAAS,iBAAO,CAAC7B,KAAMA,EAAK8B,aAC9CC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC5BG,YAAW,WAAOF,QAAQC,IAAI,EAAKZ,MAAMtB,QAAQ,O,uDAG/C,OACE,6BACA,kBAAC,EAAD,CAAQV,cAAe8C,KAAK9C,gBAC3B8C,KAAKd,MAAMtB,KAAKqC,OAAS,GAAK,kBAAC,EAAD,CAAMrC,KAAMoC,KAAKd,MAAMtB,KAAK,KAC1DoC,KAAKd,MAAMtB,KAAKqC,OAAS,GAAK,kBAAC,EAAD,W,GAlBnBC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,a","file":"static/js/main.de9b0576.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\nreturn (\r\n  <div className=\"header\">\r\n    <h1>Are you hungry?</h1>\r\n    <button className=\"button\" onClick={props.getRandomMeal}>Get Random Meal</button>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst MealVideo = ({videoLink, title}) => {\r\n  return (\r\n    <div>\r\n    <h3>Watch Recipe Video:</h3>\r\n    <iframe className=\"meal-video\" title={title}\r\n    src={`https://www.youtube.com/embed/${videoLink.slice(-11)}`}\r\n    frameBorder=\"0\" allow=\"accelerometer;\r\n    autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen>\r\n    </iframe>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MealVideo;","import React from 'react'\r\nimport MealVideo from './MealVideo';\r\nimport ScrollAnimation from 'react-animate-on-scroll';\r\n\r\nconst Meal = ({ meal }) => {\r\n  let ingredients = [];\r\n  for(let i = 1; i <= 20; i++){\r\n    if(meal[`strIngredient${i}`]){\r\n      ingredients.push(meal[`strIngredient${i}`] + \" - \" + meal[`strMeasure${i}`]);\r\n    }else {\r\n      break;\r\n    }\r\n  }\r\nreturn (\r\n  <ScrollAnimation animateIn='fadeIn' animateOut='fadeOut'>\r\n    <div className=\"wrapper\">\r\n    <div className=\"meal-container\">\r\n      <div className=\"meal__info\">\r\n        <h3>{meal.strMeal}:</h3>\r\n        <p>{meal.strInstructions}</p>\r\n      </div>\r\n      <div>\r\n        <img src={`${meal.strMealThumb}`} alt={`${meal.strMeal}-image`} className=\"meal__img\" />\r\n        {meal.strCategory && <p><span>Category:</span> {meal.strCategory}</p>}\r\n        {meal.strArea && <p><span>Area:</span> {meal.strArea}</p>}\r\n        {meal.strTags && <p><span>Tags:</span> {meal.strTags.split(\",\").join(\", \")}</p>}\r\n        <h3>Ingredients:</h3>\r\n        <ol>\r\n          {ingredients.map((ingredient,index) => <li key={index+1}>{ingredient}</li>)}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n    <div className=\"ingredients-container\">\r\n      <div>\r\n        {meal.strYoutube && <MealVideo videoLink = {meal.strYoutube} title={meal.strMeal} />}\r\n      </div>\r\n    </div>\r\n    </div>\r\n  </ScrollAnimation>\r\n);\r\n}\r\n\r\nexport default Meal;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className='footer'>\r\n     &copy; 2020 Built with ❤️ by devHaz \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Header from './components/Header';\r\nimport Meal from './components/Meal';\r\nimport Footer from './components/Footer';\r\nimport \"animate.css/animate.min.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    meal: []\r\n  }\r\n\r\ngetRandomMeal = (e) => {\r\n  e.preventDefault();\r\n  fetch('https://www.themealdb.com/api/json/v1/1/random.php')\r\n  .then(res => res.json())\r\n  .then(meal => this.setState(() => ({meal: meal.meals})))\r\n  .catch(error => console.log(error))\r\n  setTimeout(() => {console.log(this.state.meal)}, 2500)\r\n}\r\n  render(){\r\n    return (      \r\n      <div>\r\n      <Header getRandomMeal={this.getRandomMeal} />\r\n      {this.state.meal.length > 0 && <Meal meal={this.state.meal[0]} />}\r\n      {this.state.meal.length > 0 && <Footer />}\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/styles.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}