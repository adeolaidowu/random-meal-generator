{"version":3,"sources":["components/Header.js","components/MealVideo.js","components/Meal.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","getRandomMeal","MealVideo","videoLink","title","src","slice","frameBorder","allow","allowFullScreen","Meal","meal","ingredients","i","push","strMeal","strInstructions","strMealThumb","alt","strCategory","strArea","strTags","split","join","map","ingredient","index","key","strYoutube","Footer","App","state","e","preventDefault","fetch","then","res","json","setState","meals","catch","error","console","log","setTimeout","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yOAWeA,EATA,SAACC,GAChB,OACE,yBAAKC,UAAU,UACb,+CACA,4BAAQA,UAAU,SAASC,QAASF,EAAMG,eAA1C,qBCSWC,EAbG,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MAC7B,OACE,6BACA,mDACA,4BAAQL,UAAU,aAAaK,MAAOA,EACtCC,IAAG,wCAAmCF,EAAUG,OAAO,KACvDC,YAAY,IAAIC,MAAM,4EACoCC,iBAAe,MC8B9DC,EApCF,SAAC,GAEZ,IAF0B,IAAZC,EAAW,EAAXA,KACVC,EAAc,GACVC,EAAI,EAAGA,GAAK,IACfF,EAAK,gBAAD,OAAiBE,IADFA,IAEpBD,EAAYE,KAAKH,EAAK,gBAAD,OAAiBE,IAAO,MAAQF,EAAK,aAAD,OAAcE,KAK7E,OACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,4BAAKY,EAAKI,QAAV,KACA,2BAAIJ,EAAKK,kBAEX,6BACE,yBAAKX,IAAG,UAAKM,EAAKM,cAAgBC,IAAG,UAAKP,EAAKI,QAAV,UAA2BhB,UAAU,cACzEY,EAAKQ,aAAe,2BAAG,2CAAH,IAA2BR,EAAKQ,aACpDR,EAAKS,SAAW,2BAAG,uCAAH,IAAuBT,EAAKS,SAC5CT,EAAKU,SAAW,2BAAG,uCAAH,IAAuBV,EAAKU,QAAQC,MAAM,KAAKC,KAAK,OACrE,4CACA,4BACGX,EAAYY,KAAI,SAACC,EAAWC,GAAZ,OAAsB,wBAAIC,IAAKD,EAAM,GAAID,SAIhE,yBAAK1B,UAAU,yBACb,6BACGY,EAAKiB,YAAc,kBAAC,EAAD,CAAWzB,UAAaQ,EAAKiB,WAAYxB,MAAOO,EAAKI,cCtBlEc,EARA,WACb,OACE,yBAAK9B,UAAU,UAAf,gDC2BW+B,E,4MAzBbC,MAAQ,CACNpB,KAAM,I,EAGVV,cAAgB,SAAC+B,GACfA,EAAEC,iBACFC,MAAM,sDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAxB,GAAI,OAAI,EAAK2B,UAAS,iBAAO,CAAC3B,KAAMA,EAAK4B,aAC9CC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC5BG,YAAW,WAAOF,QAAQC,IAAI,EAAKZ,MAAMpB,QAAQ,O,uDAG/C,OACE,6BACA,kBAAC,EAAD,CAAQV,cAAe4C,KAAK5C,gBAC3B4C,KAAKd,MAAMpB,KAAKmC,OAAS,GAAK,kBAAC,EAAD,CAAMnC,KAAMkC,KAAKd,MAAMpB,KAAK,KAC1DkC,KAAKd,MAAMpB,KAAKmC,OAAS,GAAK,kBAAC,EAAD,W,GAlBnBC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,a","file":"static/js/main.3f81bd23.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\nreturn (\r\n  <div className=\"header\">\r\n    <h1>Are you hungry?</h1>\r\n    <button className=\"button\" onClick={props.getRandomMeal}>Get Random Meal</button>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst MealVideo = ({videoLink, title}) => {\r\n  return (\r\n    <div>\r\n    <h3>Watch Recipe Video:</h3>\r\n    <iframe className=\"meal-video\" title={title}\r\n    src={`https://www.youtube.com/embed/${videoLink.slice(-11)}`}\r\n    frameBorder=\"0\" allow=\"accelerometer;\r\n    autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen>\r\n    </iframe>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MealVideo;","import React from 'react'\r\nimport MealVideo from './MealVideo';\r\n\r\nconst Meal = ({ meal }) => {\r\n  let ingredients = [];\r\n  for(let i = 1; i <= 20; i++){\r\n    if(meal[`strIngredient${i}`]){\r\n      ingredients.push(meal[`strIngredient${i}`] + \" - \" + meal[`strMeasure${i}`]);\r\n    }else {\r\n      break;\r\n    }\r\n  }\r\nreturn (\r\n  <div className=\"wrapper\">\r\n    <div className=\"meal-container\">\r\n      <div className=\"meal__info\">\r\n        <h3>{meal.strMeal}:</h3>\r\n        <p>{meal.strInstructions}</p>\r\n      </div>\r\n      <div>\r\n        <img src={`${meal.strMealThumb}`} alt={`${meal.strMeal}-image`} className=\"meal__img\" />\r\n        {meal.strCategory && <p><span>Category:</span> {meal.strCategory}</p>}\r\n        {meal.strArea && <p><span>Area:</span> {meal.strArea}</p>}\r\n        {meal.strTags && <p><span>Tags:</span> {meal.strTags.split(\",\").join(\", \")}</p>}\r\n        <h3>Ingredients:</h3>\r\n        <ol>\r\n          {ingredients.map((ingredient,index) => <li key={index+1}>{ingredient}</li>)}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n    <div className=\"ingredients-container\">\r\n      <div>\r\n        {meal.strYoutube && <MealVideo videoLink = {meal.strYoutube} title={meal.strMeal} />}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default Meal;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className='footer'>\r\n     &copy; 2020 Built with ❤️ by devHaz \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Meal from './components/Meal';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  state = {\n    meal: []\n  }\n\ngetRandomMeal = (e) => {\n  e.preventDefault();\n  fetch('https://www.themealdb.com/api/json/v1/1/random.php')\n  .then(res => res.json())\n  .then(meal => this.setState(() => ({meal: meal.meals})))\n  .catch(error => console.log(error))\n  setTimeout(() => {console.log(this.state.meal)}, 2500)\n}\n  render(){\n    return (\n      <div>\n      <Header getRandomMeal={this.getRandomMeal} />\n      {this.state.meal.length > 0 && <Meal meal={this.state.meal[0]} />}\n      {this.state.meal.length > 0 && <Footer />}\n      </div>\n      );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}